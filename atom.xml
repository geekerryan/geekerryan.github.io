<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>『九栋老王』的博客</title>
  
  <subtitle>Machine Learning &amp; Learning Machine</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-05T11:35:08.407Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>geekerryan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小记Python（一）</title>
    <link href="http://yoursite.com/2018/01/04/%E5%B0%8F%E8%AE%B0Python%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/01/04/小记Python（一）/</id>
    <published>2018-01-04T09:46:25.000Z</published>
    <updated>2018-01-05T11:35:08.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“-”与is"><a href="#“-”与is" class="headerlink" title="“==”与is"></a>“==”与is</h1><h2 id="比较变量为数值和字符串时"><a href="#比较变量为数值和字符串时" class="headerlink" title="比较变量为数值和字符串时"></a>比较变量为数值和字符串时</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">b = 1</span><br><span class="line">print(a == b, a is b)  <span class="comment"># True True</span></span><br><span class="line">c = 'b'</span><br><span class="line">d = 'b'</span><br><span class="line">print(c == d, c is d)  <span class="comment"># True True</span></span><br></pre></td></tr></table></figure><h2 id="比较对象为list，dict，tuple，set时"><a href="#比较对象为list，dict，tuple，set时" class="headerlink" title="比较对象为list，dict，tuple，set时"></a>比较对象为list，dict，tuple，set时</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [1, 2, 3]</span><br><span class="line">b = [1, 2, 3]</span><br><span class="line">print(a == b, a is b)  <span class="comment"># True False</span></span><br><span class="line">c = (1, 2, 3)</span><br><span class="line">d = (1, 2, 3)</span><br><span class="line">print(c == d, c is d)  <span class="comment"># True False</span></span><br><span class="line">e = &#123;0: 'a', 1: 'b'&#125;</span><br><span class="line">f = &#123;0: 'a', 1: 'b'&#125;</span><br><span class="line">print(e == f, e is f)  <span class="comment"># True False</span></span><br><span class="line">g = set([1, 2, 3])</span><br><span class="line">h = set([1, 2, 3])</span><br><span class="line">print(g == h, g is h)  <span class="comment"># True False</span></span><br></pre></td></tr></table></figure><p>Summary:</p><ul><li>is比较的是两个变量的id，类似与C++里的指针</li><li>== 比较的是两个变量的value</li><li>两个变量是数值和字符串时，两个变量的id是一样的</li></ul><h1 id="“rindex”与”index”"><a href="#“rindex”与”index”" class="headerlink" title="“rindex”与”index”"></a>“rindex”与”index”</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">test </span>= 'llllll'</span><br><span class="line">sub = 'l'</span><br><span class="line">print(test.index(sub))  # 0</span><br><span class="line">print(test.rindex(sub))  # 5</span><br></pre></td></tr></table></figure><p>Summary:</p><ul><li>index返回的是子串出现的第一个位置</li><li>rindex返回的是子串出现的最后一个位置</li><li>若子串只出现了一次那么相等</li><li>同理Python中所有带r的函数都是返回最后一个出现的（位置）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;“-”与is&quot;&gt;&lt;a href=&quot;#“-”与is&quot; class=&quot;headerlink&quot; title=&quot;“==”与is&quot;&gt;&lt;/a&gt;“==”与is&lt;/h1&gt;&lt;h2 id=&quot;比较变量为数值和字符串时&quot;&gt;&lt;a href=&quot;#比较变量为数值和字符串时&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>小记Python-迭代</title>
    <link href="http://yoursite.com/2017/12/30/%E5%B0%8F%E8%AE%B0Python-%E8%BF%AD%E4%BB%A3/"/>
    <id>http://yoursite.com/2017/12/30/小记Python-迭代/</id>
    <published>2017-12-30T09:15:33.000Z</published>
    <updated>2018-01-04T09:46:56.574Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">list1</span> = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="attr">tuple1</span> = (<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>)</span><br><span class="line"><span class="attr">d</span> = &#123;<span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span>, <span class="string">'Paul'</span>: <span class="number">74</span>&#125;</span><br><span class="line"><span class="attr">d1</span> = &#123;<span class="number">0</span>: <span class="string">'Adam'</span>, <span class="number">1</span>: <span class="string">'Lisa'</span>, <span class="number">2</span>: <span class="string">'Bart'</span>, <span class="number">3</span>: <span class="string">'Paul'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代List和Tuple"><a href="#迭代List和Tuple" class="headerlink" title="迭代List和Tuple"></a>迭代List和Tuple</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    print(i) <span class="meta"># <span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuple1:</span><br><span class="line">    print(i) <span class="meta"># <span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span></span></span><br></pre></td></tr></table></figure><ul><li><p>可见，遍历的结果都是元素本身，而非索引;如果要加上索引，用enumerate</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for <span class="built_in">index</span>, <span class="keyword">value</span> <span class="keyword">in</span> enumerate(list1):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">index</span>, <span class="string">'--'</span>, <span class="keyword">value</span>) # <span class="number">0</span>--Addam <span class="number">1</span>--Lisa <span class="number">2</span>--Bart <span class="number">3</span>--Paul</span><br><span class="line">for <span class="built_in">index</span>, <span class="keyword">value</span> <span class="keyword">in</span> enumerate(tuple1):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">index</span>, <span class="string">'--'</span>, <span class="keyword">value</span>) # <span class="number">0</span>--Addam <span class="number">1</span>--Lisa <span class="number">2</span>--Bart <span class="number">3</span>--Paul</span><br></pre></td></tr></table></figure></li><li><p>使用 enumerate() 函数，可以在for循环中同时绑定索引index和元素name。<br>实际上enumerate()把[‘Adam’, ‘Lisa’, ‘Bart’, ‘Paul’]变成了[(0, ‘Adam’), (1, ‘Lisa’), (2, ‘Bart’), (3, ‘Paul’)]</p></li></ul><h3 id="迭代Dict"><a href="#迭代Dict" class="headerlink" title="迭代Dict"></a>迭代Dict</h3><ul><li><p>dict.values()返回Dict的Value，只迭代Value的话用这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d1.values():</span><br><span class="line">    <span class="built_in">print</span>(v) <span class="comment"># Adam Lisa Bart Paul</span></span><br></pre></td></tr></table></figure></li><li><p>dict.items()返回一个列表，列表的每一个元素是讲key和value合在一起的tuple<br>[(‘Lisa’, 85), (‘Adam’, 95), (‘Bart’, 59)]。可以同时打印key和value</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, <span class="built_in">value</span> <span class="keyword">in</span> d.<span class="keyword">items</span>():</span><br><span class="line">    print(key, <span class="string">'--'</span>, <span class="built_in">value</span>) <span class="comment"># Adam -- 95 Lisa -- 85 Bart -- 59 Paul -- 74</span></span><br></pre></td></tr></table></figure></li><li><p>P.S:也可以用enumerate迭代dict，但是会覆盖掉原来的key，而改成从0开始的顺序索引</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, <span class="built_in">value</span> <span class="keyword">in</span> enumerate(d):</span><br><span class="line">    print(key, <span class="string">'--'</span>, <span class="built_in">value</span>) <span class="comment"># 0 -- Adam 1 -- Lisa 2 -- Bart 3 -- Paul</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>转|中学生教你如何写好一篇技术博客</title>
    <link href="http://yoursite.com/2017/12/04/how-to-write-a-blog/"/>
    <id>http://yoursite.com/2017/12/04/how-to-write-a-blog/</id>
    <published>2017-12-04T05:03:18.000Z</published>
    <updated>2017-12-04T05:31:19.823Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="https://zhuanlan.zhihu.com/p/24240764" target="_blank" rel="noopener">这里</a></p><p>这是一篇神奇的科普文，我会从一个中学生的角度教你如何写一篇技术博客。虽然我在学校的时候作文经常不及格，但是最近我发现一些写博客的模式，掌握模式之后，做到下笔成文出口成章变成了一件非常简单的事情，希望看了这篇文章后，能够对你有一些启发。</p><p>最近，我在思考，技术文章的模式是什么？写博客的方法论是什么？我也写过不少文章，开始的时候我不知道要写什么，后来我想清楚了要写什么，但是写出来的文章乱糟糟的，后来写得多了，行文越来越流畅，我就在想，这其中都发生了些什么？可以提取出来变成一个简单的规则，变成一个通用的指导么？</p><p>别说，还真有，今天早晨在路上开车的时候，我突然想起了高中的时候写过的作文，把最近写的一些技术博客的模式在脑子里过了一下，突然觉得，写博客其实就是写作文啊。回想起来我当年的作文为什么写不好！最重要的一点，我没有遵循模式，行文混乱，观点不明。其实写作文都是有一些模式指导的，只是年轻时候的我不想被限制，故意不去接触罢了。于是我把这些写作文的模式拿了出来，做了一番梳理，越发印证了我的想法。</p><h2 id="一-如何写好一篇文章-之-文章分类"><a href="#一-如何写好一篇文章-之-文章分类" class="headerlink" title="一. 如何写好一篇文章 之 文章分类"></a>一. 如何写好一篇文章 之 文章分类</h2><p>进入正题吧，第一个话题，就说说，如何写好一篇技术文章。</p><p>在我看来，技术文章比写作文简单很多，因为作文模式很多，但是技术文章基本可以总结成两种：</p><ol><li>说明文 （技术介绍文）</li><li>议论文 （问题分析文）</li></ol><p>说明文是做技术推介，不管是一个框架，还是一种新方案，还是一个新思路的推介，由概念到细节点，下面会详细阐述应该如何写说明文。</p><p>议论文是做方案讨论，架构总结，观点解析。由问题引申解决方案，主要讲的是解决问题的过程和结果。</p><h2 id="二-如何写好一篇文章-之-行文结构"><a href="#二-如何写好一篇文章-之-行文结构" class="headerlink" title="二. 如何写好一篇文章 之 行文结构"></a>二. 如何写好一篇文章 之 行文结构</h2><p>做好类比之后，让我们来总结和回忆下作文的行文结构（括号里的是作文行文结构）</p><h3 id="技术介绍文（说明文）写作步骤"><a href="#技术介绍文（说明文）写作步骤" class="headerlink" title="技术介绍文（说明文）写作步骤:"></a>技术介绍文（说明文）写作步骤:</h3><ol><li>是什么（下定义）</li><li>能做什么（作诠释）</li><li>一些实际用法（举例子）</li><li>有什么问题,从不同角度去诠释（举反例）</li><li>与其他事物对比的劣势等，类比手法（作比较）</li><li>补充一些自己的看法感想（作补充）</li></ol><p>我觉得这个列表实在是太清晰了，无需再用华丽的辞藻去过多解释了。</p><h3 id="问题分析文（议论文）写作手法"><a href="#问题分析文（议论文）写作手法" class="headerlink" title="问题分析文（议论文）写作手法"></a>问题分析文（议论文）写作手法</h3><ol><li>前言表述场景（找论点）</li><li>表达问题痛点（发现问题，引论）</li><li>从不同角度和不同部分解构问题分解问题（分析问题，本论）</li><li>分别针对问题给出问题解决方案（解决问题，结论）</li></ol><p>括号中的都是高中教案中的行文结构指导，怎么样，有一些印象了么？是不是脑子里已经开始冒出一些点子来了，马上忍不住动笔要开始你的第一篇博客了！不急，再看一段。</p><h2 id="三-如何写好一篇文章-之-写作手法"><a href="#三-如何写好一篇文章-之-写作手法" class="headerlink" title="三. 如何写好一篇文章 之 写作手法"></a>三. 如何写好一篇文章 之 写作手法</h2><p>其实前一小节提到的一些写作步骤也包含了一些写作手法，例如类比、反比、举例等，这里主要是把写议论文的一些写作手法列一下：</p><ol><li>由主到次</li><li>由早到晚</li><li>由简单到复杂</li><li>由表及里，由浅入深</li><li>先破后立</li><li>正反对照</li></ol><h2 id="四-如何写好一篇文章-之-到底写什么？"><a href="#四-如何写好一篇文章-之-到底写什么？" class="headerlink" title="四. 如何写好一篇文章 之 到底写什么？"></a>四. 如何写好一篇文章 之 到底写什么？</h2><p>很多同学都有这个困惑，一个是不知道要写什么，二是怕写的东西不够高大上被人笑话。</p><p>我觉得首先要把心态摆正，写博客其实不是炫技，其主要目的是总结，然后顺便是分享，逼着自己把一个思路一个技术梳理清楚的同时，让看的人可以受益。</p><p>所以我很鼓励团队的同学写博客，首先这不是一个任务，而是让你去总结你做的技术方案，梳理这件事情本身，将其结构化体系化，然后在博客上做一个沉淀，这样后面来的同学可以从博客上了解到信息，你年底的时候也可以来回顾自己做过的方案。其实抛开博客不说，每个人在技术团队都需要不断梳理自己的三件事情：1. 做过的事情；2. 在做的事情；3. 要做的事情；也就是总结、沉淀、规划、目标。博客只是一个手段，内部文档也是一种手段。</p><p>至于博客本身要写些什么，大概列一下：</p><ol><li>新技术的系统介绍。</li><li>业界成熟方案或者框架的解析。</li><li>自己或者团队做过的技术方案的总结。</li><li>团队技术产出的介绍。</li><li>产品，设计的方法论等。</li><li>流程总结，协作问题解析与解决方案等。</li><li>一些更细节的点，例如性能/安全等垂直领域的研究总结。</li><li>技术架构/架构演进/架构规划等。</li></ol><p>还是需要大家自我发挥，今天的技巧就介绍到这里啦。希望大家都能多关注这件事情本身的价值意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24240764&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一篇神奇的科普文，我会从一个中学生的角度教你如何写一篇技术博客。虽然我在学校的时
      
    
    </summary>
    
      <category term="技术介绍" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
</feed>
