{"meta":{"title":"『九栋老王』的博客","subtitle":"Machine Learning & Learning Machine","description":"天赋如同自然花木，要用学习来修剪。","author":"geekerryan","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-12-01T05:41:55.310Z","updated":"2017-12-01T05:41:45.207Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":"404 - arao'blog"},{"title":"关于","date":"2017-11-30T09:01:16.000Z","updated":"2017-12-06T11:05:26.047Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2017-12-01T03:26:45.000Z","updated":"2017-12-01T05:31:46.773Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"文章标签","date":"2017-12-01T03:27:17.000Z","updated":"2017-12-01T05:32:01.368Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"小记Python（一）","slug":"小记Python（一）","date":"2018-01-04T09:46:25.000Z","updated":"2018-01-05T08:56:57.032Z","comments":true,"path":"2018/01/04/小记Python（一）/","link":"","permalink":"http://yoursite.com/2018/01/04/小记Python（一）/","excerpt":"","text":"“==”与is比较变量为数值和字符串时123456a = 1b = 1print(a == b, a is b) # True Truec = 'b'd = 'b'print(c == d, c is d) # True True 比较对象为list，dict，tuple，set时123456789101112a = [1, 2, 3]b = [1, 2, 3]print(a == b, a is b) # True Falsec = (1, 2, 3)d = (1, 2, 3)print(c == d, c is d) # True Falsee = &#123;0: 'a', 1: 'b'&#125;f = &#123;0: 'a', 1: 'b'&#125;print(e == f, e is f) # True Falseg = set([1, 2, 3])h = set([1, 2, 3])print(g == h, g is h) # True False Summary: is比较的是两个变量的id，类似与C++里的指针 == 比较的是两个变量的value 两个变量是数值和字符串时，两个变量的id是一样的 “rindex”与”index”1234test = 'llllll'sub = 'l'print(test.index(sub)) # 0print(test.rindex(sub)) # 5 Summary: index返回的是子串出现的第一个位置 rindex返回的是子串出现的最后一个位置 若子串只出现了一次那么相等 同理Python中所有带r的函数都是返回最后一个出现的（位置）","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"小记Python-迭代","slug":"小记Python-迭代","date":"2017-12-30T09:15:33.000Z","updated":"2018-01-04T09:46:56.574Z","comments":true,"path":"2017/12/30/小记Python-迭代/","link":"","permalink":"http://yoursite.com/2017/12/30/小记Python-迭代/","excerpt":"","text":"1234list1 = ['Adam', 'Lisa', 'Bart', 'Paul']tuple1 = ('Adam', 'Lisa', 'Bart', 'Paul')d = &#123;'Adam': 95, 'Lisa': 85, 'Bart': 59, 'Paul': 74&#125;d1 = &#123;0: 'Adam', 1: 'Lisa', 2: 'Bart', 3: 'Paul'&#125; 迭代List和Tuple12345for i in list1: print(i) # 'Adam', 'Lisa', 'Bart', 'Paul'for i in tuple1: print(i) # 'Adam', 'Lisa', 'Bart', 'Paul' 可见，遍历的结果都是元素本身，而非索引;如果要加上索引，用enumerate 1234for index, value in enumerate(list1): print(index, '--', value) # 0--Addam 1--Lisa 2--Bart 3--Paulfor index, value in enumerate(tuple1): print(index, '--', value) # 0--Addam 1--Lisa 2--Bart 3--Paul 使用 enumerate() 函数，可以在for循环中同时绑定索引index和元素name。实际上enumerate()把[‘Adam’, ‘Lisa’, ‘Bart’, ‘Paul’]变成了[(0, ‘Adam’), (1, ‘Lisa’), (2, ‘Bart’), (3, ‘Paul’)] 迭代Dict dict.values()返回Dict的Value，只迭代Value的话用这个 12for v in d1.values(): print(v) # Adam Lisa Bart Paul dict.items()返回一个列表，列表的每一个元素是讲key和value合在一起的tuple[(‘Lisa’, 85), (‘Adam’, 95), (‘Bart’, 59)]。可以同时打印key和value 12for key, value in d.items(): print(key, '--', value) # Adam -- 95 Lisa -- 85 Bart -- 59 Paul -- 74 P.S:也可以用enumerate迭代dict，但是会覆盖掉原来的key，而改成从0开始的顺序索引 12for key, value in enumerate(d): print(key, '--', value) # 0 -- Adam 1 -- Lisa 2 -- Bart 3 -- Paul","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"转|中学生教你如何写好一篇技术博客","slug":"how-to-write-a-blog","date":"2017-12-04T05:03:18.000Z","updated":"2017-12-04T05:31:19.823Z","comments":true,"path":"2017/12/04/how-to-write-a-blog/","link":"","permalink":"http://yoursite.com/2017/12/04/how-to-write-a-blog/","excerpt":"","text":"转自这里 这是一篇神奇的科普文，我会从一个中学生的角度教你如何写一篇技术博客。虽然我在学校的时候作文经常不及格，但是最近我发现一些写博客的模式，掌握模式之后，做到下笔成文出口成章变成了一件非常简单的事情，希望看了这篇文章后，能够对你有一些启发。 最近，我在思考，技术文章的模式是什么？写博客的方法论是什么？我也写过不少文章，开始的时候我不知道要写什么，后来我想清楚了要写什么，但是写出来的文章乱糟糟的，后来写得多了，行文越来越流畅，我就在想，这其中都发生了些什么？可以提取出来变成一个简单的规则，变成一个通用的指导么？ 别说，还真有，今天早晨在路上开车的时候，我突然想起了高中的时候写过的作文，把最近写的一些技术博客的模式在脑子里过了一下，突然觉得，写博客其实就是写作文啊。回想起来我当年的作文为什么写不好！最重要的一点，我没有遵循模式，行文混乱，观点不明。其实写作文都是有一些模式指导的，只是年轻时候的我不想被限制，故意不去接触罢了。于是我把这些写作文的模式拿了出来，做了一番梳理，越发印证了我的想法。 一. 如何写好一篇文章 之 文章分类进入正题吧，第一个话题，就说说，如何写好一篇技术文章。 在我看来，技术文章比写作文简单很多，因为作文模式很多，但是技术文章基本可以总结成两种： 说明文 （技术介绍文） 议论文 （问题分析文） 说明文是做技术推介，不管是一个框架，还是一种新方案，还是一个新思路的推介，由概念到细节点，下面会详细阐述应该如何写说明文。 议论文是做方案讨论，架构总结，观点解析。由问题引申解决方案，主要讲的是解决问题的过程和结果。 二. 如何写好一篇文章 之 行文结构做好类比之后，让我们来总结和回忆下作文的行文结构（括号里的是作文行文结构） 技术介绍文（说明文）写作步骤: 是什么（下定义） 能做什么（作诠释） 一些实际用法（举例子） 有什么问题,从不同角度去诠释（举反例） 与其他事物对比的劣势等，类比手法（作比较） 补充一些自己的看法感想（作补充） 我觉得这个列表实在是太清晰了，无需再用华丽的辞藻去过多解释了。 问题分析文（议论文）写作手法 前言表述场景（找论点） 表达问题痛点（发现问题，引论） 从不同角度和不同部分解构问题分解问题（分析问题，本论） 分别针对问题给出问题解决方案（解决问题，结论） 括号中的都是高中教案中的行文结构指导，怎么样，有一些印象了么？是不是脑子里已经开始冒出一些点子来了，马上忍不住动笔要开始你的第一篇博客了！不急，再看一段。 三. 如何写好一篇文章 之 写作手法其实前一小节提到的一些写作步骤也包含了一些写作手法，例如类比、反比、举例等，这里主要是把写议论文的一些写作手法列一下： 由主到次 由早到晚 由简单到复杂 由表及里，由浅入深 先破后立 正反对照 四. 如何写好一篇文章 之 到底写什么？很多同学都有这个困惑，一个是不知道要写什么，二是怕写的东西不够高大上被人笑话。 我觉得首先要把心态摆正，写博客其实不是炫技，其主要目的是总结，然后顺便是分享，逼着自己把一个思路一个技术梳理清楚的同时，让看的人可以受益。 所以我很鼓励团队的同学写博客，首先这不是一个任务，而是让你去总结你做的技术方案，梳理这件事情本身，将其结构化体系化，然后在博客上做一个沉淀，这样后面来的同学可以从博客上了解到信息，你年底的时候也可以来回顾自己做过的方案。其实抛开博客不说，每个人在技术团队都需要不断梳理自己的三件事情：1. 做过的事情；2. 在做的事情；3. 要做的事情；也就是总结、沉淀、规划、目标。博客只是一个手段，内部文档也是一种手段。 至于博客本身要写些什么，大概列一下： 新技术的系统介绍。 业界成熟方案或者框架的解析。 自己或者团队做过的技术方案的总结。 团队技术产出的介绍。 产品，设计的方法论等。 流程总结，协作问题解析与解决方案等。 一些更细节的点，例如性能/安全等垂直领域的研究总结。 技术架构/架构演进/架构规划等。 还是需要大家自我发挥，今天的技巧就介绍到这里啦。希望大家都能多关注这件事情本身的价值意义。","categories":[{"name":"技术介绍","slug":"技术介绍","permalink":"http://yoursite.com/categories/技术介绍/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"http://yoursite.com/tags/Blog/"}]}]}